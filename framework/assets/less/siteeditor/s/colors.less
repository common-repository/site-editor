@luma-upper-break:60%;
@luma-lower-break:30%;


.rgba-variant (@attr; @color;@alpha){
 @{attr}:rgba(red(@color),green(@color),blue(@color),@alpha );

}
.rgba-box-shadow(@shadow:0 0 0;@color:#000;@alpha:0) {
    -webkit-box-shadow: @shadow rgba(red(@color),green(@color),blue(@color),@alpha ); // iOS <4.3 & Android <4.1
            box-shadow: @shadow rgba(red(@color),green(@color),blue(@color),@alpha );
}
.rgba-box-shadow2(@shadow1:0 0 0;@color1:#000;@alpha1:0;@shadow2:0 0 0;@color2:#000;@alpha2:0;@shadow3:0 0 0;@color3:#000;@alpha3:0) {
    -webkit-box-shadow: @shadow1 rgba(red(@color1),green(@color1),blue(@color1),@alpha1 ),@shadow2 rgba(red(@color2),green(@color2),blue(@color2),@alpha2 ),@shadow3 rgba(red(@color3),green(@color3),blue(@color3),@alpha3 ); // iOS <4.3 & Android <4.1
            box-shadow: @shadow1 rgba(red(@color1),green(@color1),blue(@color1),@alpha1 ),@shadow2 rgba(red(@color2),green(@color2),blue(@color2),@alpha2 ),@shadow3 rgba(red(@color3),green(@color3),blue(@color3),@alpha3 );
}
.rgba-bg-color(@color,@alpha){
  background-color:rgba(red(@color),green(@color),blue(@color),@alpha );
}
.rgba-color(@color,@alpha){
 color:rgba(red(@color),green(@color),blue(@color),@alpha );
}
.rgba-border-color(@color,@alpha){
  border-color:rgba(red(@color),green(@color),blue(@color),@alpha );
}
/*
.rgba-shadow-color(@color,@alpha){
  background-color:rgba(red(@color),green(@color),blue(@color),@alpha );
}
*/
.contrast-color-ovd (@color) when (luma(@color) >= 50%) {
    //darker text for lighter backgrounds
    color:darken(@color,35%);
}

.contrast-color-ovd (@color) when (luma(@color) < 50%) {
    //white text for everything else
    color:#ffffff;
}
.text-shadow(@shadow){
   text-shadow:@shadow;  
}

.box-shadow-base(@intensity:1) {
    .box-shadow(0px 1px 2px rgba(@shadow-r,@shadow-g,@shadow-b,@intensity*@shadow-intensity));
   // .box-shadow(none);
}

.box-shadow-base(@intensity:1) when (luma(@base-color-a) > @luma-upper-break)  {
    @shadow-intensity:.05;
    .box-shadow(0px 1px 2px rgba(@shadow-r,@shadow-g,@shadow-b,@intensity*@shadow-intensity));
  //  .box-shadow(none);
}

.box-shadow-inset-base(@intensity:1) {
    .box-shadow(inset 0px 0px 3px rgba(@shadow-r,@shadow-g,@shadow-b,@intensity*@shadow-intensity));
  //  .box-shadow(none);
}

.box-shadow-inset-base(@intensity:1) when (luma(@base-color-a) > @luma-upper-break) {
    @shadow-intensity:.05;
    .box-shadow(inset 0px 0px 3px rgba(@shadow-r,@shadow-g,@shadow-b,@intensity*@shadow-intensity));
  //  .box-shadow(none);
}
.borders(@color) {
    border-width:1px;
    border-style:solid;
    border-color:mix(softlight(white,@color),@color,16%);
}

.borders(@color) when (luma(@color) > @luma-upper-break) {
    border:1px;
    border-style:solid;
    border-color:mix(#333,@color,16%);
}

.borders(@color) when (luma(@color) < 10%) {
    border:1px;
    border-style:solid;
    border-color:mix(softlight(white,@color),@color,16%);
}
/* hr
*****************************/

.hr(@color) when (luma(@base-color-a) > @luma-upper-break) {
    margin-top:    @line-height-computed;
    margin-bottom: @line-height-computed;
    border: 0;
    border-top: 1px solid mix(#333,@color,30%);
}

.hr(@color) when (luma(@base-color-a) < 10%) {
    margin-top:    @line-height-computed;
    margin-bottom: @line-height-computed;
    border: 0;
    border-top: 1px solid mix(softlight(white,@color),@color,30%);
}

/* label
*****************************/

.label-color(@color) {
    background:@color;
    .contrast(@color);
    text-shadow:none;
}

/***** start==> edit by bobak
- .smart-variant()  ======= a function to generate color based on given background color
- @attr     Atribute name, eg. color, border-color or background-color
- @color    The backgound color, that the contrast color should generate against that
- @percent  The percent of darken() or lighten() function
- @mix      A "constant" to mix with given @color, Dont send this argument on calling function!
- @mixrate  The percent of mix() function
- function call examples: .smart-variant(color; @skin-heading-bg);
*/
.smart-variant (@attr; @color; @percent: 35%; @mixrate: 50%; @mix: #888; @fade: 100%;) when (luma(@color) >= @luma-upper-break) {
    //darker text for lighter backgrounds
    @{attr}: fade(mix(darken(@color, @percent),@mix, @mixrate), @fade);
}

.smart-variant (@attr; @color; @percent: 35%; @mixrate: 50%; @mix: #eee; @fade: 100%;) when (luma(@color) < @luma-upper-break) {
    //lighter text for darker backgrounds
    @{attr}: fade(mix(lighten(@color, @percent),@mix, @mixrate), @fade);
}
/***** end==> edit by bobak - 14.10.09.14:45 */

// contrasts text against a given background color

.contrast (@color; @percent: 55%; @mixrate: 50%; @mix: #888;@attr:color;@fade:100%) when (luma(@color) >= @luma-upper-break) {
    //darker text for lighter backgrounds
    @{attr}:fade(mix(darken(@color, @percent),@mix, @mixrate), @fade);
}
.high-color(@color ;@attr:color) when (luma(@color) >= @luma-upper-break){

//.contrast(@color; @percent: 55%; @mixrate: 50%; @mix: #373737;@attr;@fade:100%);         // @color:#fff -> #555
//.contrast(#fff; @percent: 70%; @mixrate: 55%; @mix: #373737;@attr;@fade:100%);           // @color:#fff -> #434343
.contrast(@color; @percent: 80%; @mixrate: 80%; @mix: #333;@attr;@fade:100%);              // @color:#fff -> #333

}
.base-color(@color; @percent: 59% ;@attr:color) when (luma(@color) >= @luma-upper-break){

  & when (@percent >= 60%){     
    @percent2: @percent / 2;
    .contrast(@color; @percent2; @mixrate: 44.5%; @mix: #fff;@attr;@fade:100%);
  }
  .contrast(@color; @percent; @mixrate: 50%; @mix: #777;@attr;@fade:100%);            // @color:#fff ->  #757575     @percent: 25%  -> #9b9b9b  34% ->#909090

}
.low-color(@color ;@attr:color) when (luma(@color) >= @luma-upper-break){
                                                                                                                                
  .contrast(@color; @percent: 31%; @mixrate: 50%; @mix: #9f9f9f;@attr;@fade:100%);         // @color:#fff -> #a7a7a7

}
.lower-color(@color ;@attr:color) when (luma(@color) >= @luma-upper-break){

  .contrast(@color; @percent: 0%; @mixrate: 50%; @mix: #9f9f9f;@attr;@fade:100%);         // @color:#fff ->  #cfcfcf

}





.contrast (@color; @percent: 35%; @mixrate: 50%; @mix: #eee;@attr:color;@fade:100%) when (luma(@color) < @luma-upper-break) {

    //white text for everything else
    //color:#ffffff;
    @{attr}:fade(mix(lighten(@color, @percent),@mix, @mixrate), @fade);
}

.high-color(@color;@attr:color) when (luma(@color) < @luma-upper-break) {

.contrast(@color; @percent: 100%; @mixrate: 50%; @mix: #fff;@attr;@fade:100%);        // @color:#000 ->  #fff       &    @color:#21C2F8 ->#ffffff

}
.base-color(@color ; @percent: 40% ;@attr:color) when (luma(@color) < @luma-upper-break) {

  & when (@percent <= 35%){
    @percent2: @percent * 2;
    .contrast(@color; @percent2; @mixrate: 44.5%; @mix: #fff;@attr;@fade:100%);
  }
  .contrast(@color; @percent; @mixrate: 44.5%; @mix: #fff;@attr;@fade:100%);     // @color:#000 ->  #bbb  /  @percent: 50%  -> #c6c6c6  /  60% ->d2d2d2     &    @color:#21C2F8 ->#f4fcff

}
.low-color(@color ; @attr:color) when (luma(@color) < @luma-upper-break) {

  .contrast(@color; @percent: 40%; @mixrate: 80%; @mix: #fff;@attr;@fade:100%);       //@color:#000 ->  #858585     &     @color:#21C2F8 ->#ecfafe

}
.lower-color(@color; @attr:color) when (luma(@color) < @luma-upper-break) {

  .contrast(@color; @percent: 5%; @mixrate: 50%; @mix: #949494;@attr;@fade:100%);    // @color:#000 ->  #505050    &     @color:#21C2F8 ->#67aec6

}

/* end==> edited by bobak */

/* link
*****************************/

.contrast-link (@color) when (luma(@color) >= @luma-upper-break) {
    color:@main-color;
}

.contrast-link (@color) when (luma(@color) < @luma-upper-break) {
    color:mix(#ffffff,@main-color,75%);
}
/* link
*****************************/

.contrast-hover (@color) when (luma(@color) >= @luma-upper-break) {
    color:darken(@main-color, 15%);
}

.contrast-hover (@color) when (luma(@color) < @luma-upper-break) {
    color:lighten(@main-color,75%);
}

.bg-variant(@color) {
  background-color: @color;
  a&:hover {
    background-color: darken(@color, 10%);
  }
}
/*.button-text (@color) when (luma(@color1) >= @luma-upper-break) {
    color:average(darken(@color,30%),#222);
}

.button-text (@color) when (luma(@color1) < @luma-upper-break) {
    color:#ffffff;
}
   */
// Typography

.text-emphasis-variant(@color) {
  color: @color;
  a&:hover {
    color: darken(@color, 10%);
  }
}












/*The second argument by default on all functions automatically,
but if the amount awarded to the arguments you give it a second insert*/


.alignleft(){float: left;  .rtl-body &{float: right;} }

.alignright() {float: right;  .rtl-body &{float: left;} }


.left(@left:0;@right:auto) {
  left: @left;
  right: @right;
    .rtl-body &{
        left: @right;
        right: @left;
    }
}

.right(@right:0;@left:auto) {
  left: @left;
  right: @right;
    .rtl-body &{
        left: @right;
        right: @left;
    }
}


.textleft() {text-align: left; .rtl-body &{text-align: right;}}

.textright() {text-align: right; .rtl-body &{text-align: left;}}


.margin-left(@left:0;@right:auto){
    margin-left:@left;
    margin-right: @right;
    .rtl-body &{
        margin-left: @right;
        margin-right: @left;
    }
}

.margin-right(@right:0;@left:auto){
    margin-left:@left;
    margin-right: @right;
    .rtl-body &{
        margin-left: @right;
        margin-right: @left;
    }
}



.padding-left(@left:0;@right:auto){
    padding-left:@left;
    padding-right: @right;
    .rtl-body &{
        padding-left: @right;
        padding-right: @left;
    }
}

.padding-right(@right:0;@left:auto){
    padding-left:@left;
    padding-right: @right;
    .rtl-body &{
        padding-left: @right;
        padding-right: @left;
    }
}







/*

.alignleft(){float: right;}

.alignright() {float: left;}


.left(@i:0) {right: @i; left: auto;}

.right(@i:0) {left: @i; right: auto;}


.textleft() {text-align: right;}

.textright() {text-align: left;}


.margin-left(@i:0;){
    margin-left:auto;
    margin-right:@i;
}

.margin-right(@i:0){
    margin-right: auto;
    margin-left: @i;
}



.padding-left(@i:0){
    padding-left:auto;
    padding-right:@i;
}

.padding-right(@i:0){
    padding-right:auto;
    padding-left:@i;
}

*/

