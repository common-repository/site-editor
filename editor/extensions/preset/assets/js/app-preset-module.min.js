(function( exports, $ ) {

    var api = sedApp.editor ;

    api.AppPreset = api.Class.extend({

        initialize: function( params , options ){
            var self = this;

            $.extend( this, options || {} );

            this.lastNewPattern = null;

            this.lastParentId = null;

            this.lastLoadPatternId = null;

            this.completePatternsLoaded = [];

            this.loadPresetAttachment = false;

            //TODO : Fixed Preset Ajax Patterns Change Bug
            api.preview.bind( 'sedLoadNewPreset', function( patternInfo ) {

                var presetPattern = patternInfo.content,
                    loadPatternId = patternInfo.loadPatternId;

                var newPattern = api.sedShortcode.clone( presetPattern );
                    elementId = api.currentSedElementId ;

                var mainShortcode = api.contentBuilder.getShortcode( elementId ) ,
                    parentId = mainShortcode.parent_id,
                    moduleSh = api.contentBuilder.getShortcode( parentId ) ,
                    rowSh = api.contentBuilder.getShortcode( moduleSh.parent_id ),
                    rowEl = $( '[sed_model_id="' + moduleSh.parent_id + '"]');


                if( rowEl.parent().hasClass("sed-site-main-part") ){

                    if( !_.isUndefined( rowEl.data("themeId") ) ) {

                        newPattern[0].theme_id = _.clone( rowEl.data("themeId") );

                        if( !_.isUndefined( rowSh.is_customize ) && rowSh.is_customize === true ){

                            newPattern[0].is_customize = true;

                        }

                    }else{

                        newPattern[0].rel_theme_id = _.clone( rowSh.rel_theme_id );

                        newPattern[0].row_type = _.clone( rowSh.row_type );

                    }

                }

                //create new pattern
                newPattern = api.pageBuilder.loadPattern( newPattern , rowSh.parent_id ); 

                //set helper id for add shortcode pattern id
                newPattern = api.pageBuilder.setHelperShortcodes( newPattern , mainShortcode.tag , "tag" );

                //shortcode pattern filter
                newPattern = api.pageBuilder.shortcodesPatternFilter( newPattern );

                self.lastParentId = newPattern[0].id;

                self.lastLoadPatternId = loadPatternId;

                self.lastNewPattern = newPattern;

                //console.log( "-----NNNNN-----presetPattern----NNNNNN------------" , newPattern );

                var _callback = function(){

                    //replace new pattern with old shortcodes models
                    api.sedShortcode.replaceModel( moduleSh.parent_id , newPattern );

                    //send data to top iframe for save ready
                    api.contentBuilder.sendData();

                    //apply design editor css in preview
                    api.pageBuilder.syncStyleEditorPreview( newPattern );

                    //Current Element Id refresh
                    api.currentSedElementId = newPattern[2].id;

                    var _completePatternLoad = function(){

                        var patternScripts = api.sedShortcode.getPatternScripts( newPattern );

                        var patternStyles = api.sedShortcode.getPatternStyles( newPattern );

                        if( $.isArray( patternScripts ) && patternScripts.length > 0 )
                            api.pageBuilder.moduleScriptsLoad( patternScripts );

                        if( $.isArray( patternStyles ) && patternStyles.length > 0 )
                            api.pageBuilder.moduleStylesLoad( patternStyles );

                        api.preview.send( 'changeCurrentElementByChangePreset', {
                            elementId       : newPattern[2].id ,
                            shortcode_name  : newPattern[2].tag ,
                            attrs           : newPattern[2].attrs
                        });

                        api.Events.trigger( "sedAfterChangePreset" , moduleSh.parent_id , newPattern[0].id );
                        api.Events.trigger( "after-change-preset-" + moduleSh.parent_id );

                        self.completePatternsLoaded.push( loadPatternId );

                    };

                    var transport = api.sedShortcode.getPatternTransport( newPattern );

                    if( transport == "ajax" ){

                        var _success = function( response ){

                            $( '[sed_model_id="' + moduleSh.parent_id + '"]' ).replaceWith( response.data );

                            _completePatternLoad();

                            var shortcode = api.contentBuilder.getShortcode( newPattern[0].id );

                            api.Events.trigger( "sedAfterRefreshModule" , newPattern[0].id , shortcode , response.data );

                        };

                        api.pageBuilder.ajaxLoadModules( newPattern[0].id, _success );

                    }else {

                        //refresh module in @DOM
                        var html = api.contentBuilder.do_shortcode( "sed_row" , newPattern[0].id , newPattern[0].id );

                        $( '[sed_model_id="' + moduleSh.parent_id + '"]' ).replaceWith( html );

                        _completePatternLoad();

                    }


                    //api.selectPlugin.select( $( '[sed_model_id="' + newPattern[0].id + '"]' ) , false );

                };

                var modulesEditorJs = api.sedShortcode.getPatternModulesScripts( newPattern );

                //console.log( "----------modulesEditorJs------------" , modulesEditorJs );

                if( !_.isEmpty( modulesEditorJs) ){
                    var scripts = api.pageBuilder._checkLoadedScript( modulesEditorJs , api.pageBuilder.wpScripts );
                    if($.isArray( scripts )  && scripts.length > 0 )
                        api.pageBuilder.moduleScriptsLoad( scripts , _callback );
                    else
                        _callback();
                }else
                    _callback();

            });

            api.preview.bind( 'sedLoadPresetAttachment', function( data ) {

                var loadPatternId = data.loadPatternId,
                    attachments = data.attachments;

                _.each( attachments , function( attachment ){

                    var oldAttachment = _.findWhere( api.attachmentsSettings , { id : parseInt( attachment.id ) }  );

                    if( ! oldAttachment ){
                        api.attachmentsSettings.push( attachment );
                    }

                });

                if( loadPatternId === self.lastLoadPatternId ){

                    var transport = api.sedShortcode.getPatternTransport( self.lastNewPattern );

                    if( $.inArray( loadPatternId , self.completePatternsLoaded ) > -1 ) {

                        if( transport != "ajax" ) {

                            self.loadPresetAttachment = true; 
                            
                            api.contentBuilder.refreshModule(self.lastParentId);

                            self.loadPresetAttachment = false;
                            
                        }

                        api.selectPlugin.select( $( '[sed_model_id="' + self.lastNewPattern[2].id + '"]' ) , false , false , true );

                        /*api.preview.send( 'changeCurrentElementByChangePreset', {
                            elementId       : self.lastNewPattern[0].id ,
                            shortcode_name  : self.lastNewPattern[0].tag ,
                            attrs           : self.lastNewPattern[0].attrs
                        });*/

                    }

                }

            });

            api.addFilter( "sedFastDoShortcodesChildren" , function( isFastRefresh ){

                if( self.loadPresetAttachment === true ) {
                    isFastRefresh = false;
                }

                return isFastRefresh;
            });

            api.preview.bind( 'sedSetAsDefaultPreset', function( obj ) {
                api.defaultPatterns[obj.name] = obj.content;
            });

            //this.ready();
        },

    });


    $( function() {

        api.appPreset = new api.AppPreset({});

    });

}(sedApp, jQuery));