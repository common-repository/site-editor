(function( exports, $ ) {
    var api = sedApp.editor;

    $( function() {
        api.contentLayoutPatterns = window._sedAppContentLayoutPatterns;

        var currentMainContentId = false, currentMainContent, currentNewMainContentId;

        api.addFilter( 'doShortcodeFilter' , function( content , shortcode_name , id , mainShortcodeId ){
            if( shortcode_name == "sed_content_layout_column" ){
                var shortcode = api.contentBuilder.getShortcode( id );

                if( !_.isUndefined( shortcode.attrs ) && !_.isUndefined( shortcode.attrs.sed_main_content ) && shortcode.attrs.sed_main_content == "yes" ){

                    if( currentMainContentId !== false ){
                        id = currentMainContentId;
                        currentMainContentId = false;
                    }else{
                        currentNewMainContentId = id;
                    }

                    currentMainContent = $('.sed-main-content-layout-module .sed-column-contents-pb.sed-main-content-column').children().appendTo( $("body" )).hide();
                    content = content.replace( "{{content}}" , "" );
                }

            }

            return content;
        });

        api.Events.bind( "sedAfterRefreshModule" , function( elementId , shortcode , html ){
            if( shortcode.tag == "sed_content_layout" ){
                currentMainContent.show().appendTo( $('.sed-main-content-layout-module .sed-column-contents-pb.sed-main-content-column') );
            }
        });

        api.shortcodeUpdate.sed_content_layout = {
            layout : function( id , value ){
                var contentModelName = "theme",
                    $thisShortcode = api.contentBuilder.getShortcode( id , contentModelName ),
                    ChildrenShortcodes = [] , postId = $(".sed-site-main-part").data("postId"),
                    sidebarShortcodes = [];

                ChildrenShortcodes = api.contentBuilder.findAllTreeChildrenShortcode( id , postId , contentModelName );

                _.each( ChildrenShortcodes , function( shortcode ){
                    if( shortcode.tag == "sed_content_layout_column"  &&  (_.isUndefined( shortcode.attrs ) || _.isUndefined( shortcode.attrs.sed_main_content ) || shortcode.attrs.sed_main_content == "no" ) ){
                        var children = api.contentBuilder.findAllTreeChildrenShortcode( shortcode.id , postId , contentModelName );
                        sidebarShortcodes.push({
                            children    : api.sedShortcode.clone( children ) ,
                            id          : shortcode.id ,
                        });
                    }else if( shortcode.tag == "sed_content_layout_column"  && !_.isUndefined( shortcode.attrs ) && !_.isUndefined( shortcode.attrs.sed_main_content ) && shortcode.attrs.sed_main_content == "yes" ){
                        currentMainContentId = shortcode.id;
                    }
                });

                var pattern = api.sedShortcode.clone( api.contentLayoutPatterns[value] );

                var newShortcodes = api.pageBuilder.loadPattern( pattern , id );

                var iSidebar = 0,
                    layoutShortcodes = [];

                _.each( newShortcodes , function( shortcode ){

                    layoutShortcodes.push( shortcode );

                    if( shortcode.tag == "sed_content_layout_column"  &&  (_.isUndefined( shortcode.attrs ) || _.isUndefined( shortcode.attrs.sed_main_content ) || shortcode.attrs.sed_main_content == "no" ) ){
                        if( sidebarShortcodes.length > iSidebar ){
                            var currSidebar = sidebarShortcodes[iSidebar];
                            if( !_.isUndefined( currSidebar.children ) && !_.isUndefined( currSidebar.id ) && currSidebar.children.length > 0 ) {

                                currSidebar.children = _.map( currSidebar.children ,function( shModel ){
                                    if( shModel.parent_id == currSidebar.id ){
                                        shModel.parent_id = shortcode.id;
                                    }
                                    return shModel;
                                });

                                Array.prototype.push.apply( layoutShortcodes, currSidebar.children );

                            }
                        }
                        iSidebar++;
                    }else if( shortcode.tag == "sed_content_layout_column"  && !_.isUndefined( shortcode.attrs ) && !_.isUndefined( shortcode.attrs.sed_main_content ) && shortcode.attrs.sed_main_content == "yes" ){
                        currentNewMainContentId = shortcode.id;
                    }

                });

                //console.log( "------api.shortcodeUpdate.layoutShortcodes-LAYOUT--------" , layoutShortcodes );

                var currIndex = api.contentBuilder.getShortcodeIndex( id , contentModelName) ,
                    childrenLength = ChildrenShortcodes.length ,
                    args = $.merge([ currIndex + 1 , childrenLength ] , layoutShortcodes);

                Array.prototype.splice.apply( api.contentBuilder.contentModel[postId] , args );
                api.contentBuilder.sendData(); 

                api.contentBuilder.refreshModule( id );
            }
        };

    });


}(sedApp, jQuery));