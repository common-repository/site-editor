(function( exports, $ ){
    
    var api = sedApp.editor;

    api.pageSettings = api.pageSettings || {};

    api.SiteEditorPageOptionsPreview = api.Class.extend({

        /**
         * Initialize SiteEditor Page Options Preview
         * 
         * @param options : Class Options
         */
        initialize: function ( options ) {

            var self = this;

            this.data = {
                settings        : {} ,
                publicOption    : '' ,
                privateOption   : ''
            };

            this.currentScope = 'public';

            $.extend( this, options || {} );

            api.preview.bind( 'active' , function() {
                self.settingsBind();
            });

        } ,

        getPageSetting : function ( id ) {

            var settingId = this.data.privateOption.replace( "##id##" , id );

            return api.has( settingId ) ? api( settingId ).get() : null;

        } ,

        settingsBind : function ( ) {

            var self = this;

            //console.log( "-------------this.data.settings-----------------" , this.data.settings );

            $.each( this.data.settings , function( id , args ){

                if( args.transport == "postMessage" ){

                    var settingId = self.data.privateOption.replace( "##id##" , id );

                    api( settingId , function (value) {
                        value.bind(function (to) {

                            if( !_.isUndefined( api.pageSettings[id] ) && _.isFunction( api.pageSettings[id] ) ){
                                api.pageSettings[id]( to , settingId );
                            }

                        });
                    });

                }

            });

            api( 'site_length' , function (value) {
                value.bind(function (to) {
                    self.setPageLength( to , 'site' );
                });
            });

            api( 'sheet_width' , function (value) {
                value.bind(function (to) {

                    var page_length = self.getPageSetting( 'page_length' );

                    if( _.isNull( page_length ) ){
                        alert( "Error Null Value" );
                        return ;
                    }

                    var site_length = api( 'site_length' )();

                    var sheet_width = to;

                    self.setLayoutWidthPreview( page_length , sheet_width , site_length );

                    $("#site-editor-main-part").find(".sed-row-pb > .sed-pb-module-container").trigger("sedChangedSheetWidth");

                });
            });

        } ,

        setLayoutWidthPreview : function( $page_length , $sheet_width , $site_length ){

            var css = '';

            $page_length = ( $page_length === 'default' ) ? $site_length : $page_length;

            if( $page_length == "boxed" ) {

                css += api.themeFeatures['site_layout_feature'].main_selector;
                css += ",.sed-row-boxed{";
                css += "max-width : " + $sheet_width + " !important;";
                css += "margin-left : auto !important;";
                css += "margin-right : auto !important;";
                css += "}";

            }else{

                css += api.themeFeatures['site_layout_feature'].main_selector;
                css += "{max-width : 100% !important;}";

                css += ".sed-row-boxed{";
                css += "max-width : " + $sheet_width + " !important;";
                css += "}";

            }

            css += api.themeFeatures['site_layout_feature'].selectors;
            css += ",.sed-row-boxed{";
            css += "max-width : " + $sheet_width + " !important;";
            css += "margin-left : auto !important;";
            css += "margin-right : auto !important;";
            css += "}";

            $("#sedPageLayoutWidthstyle").remove();

            $("<style id='sedPageLayoutWidthstyle'>" + css + " </style>").appendTo( $("head") );

        } ,

        setPageLength : function( newValue , type ){

            var sheet_width = api( 'sheet_width' )() ,
                type = ( _.isUndefined( type ) || _.isEmpty( type ) ) ? 'site' : type;

            if( _.isNull( sheet_width ) ){
                alert( "Error Null Value" );
                return ;
            }

            var page_length = ( type == 'page' ) ? newValue : this.getPageSetting( 'page_length' );

            var site_length = ( type == 'site' ) ? newValue : api( 'site_length' )();

            this.setLayoutWidthPreview( page_length , sheet_width , site_length );

            var targEl = $("#site-editor-main-part");

            /*if(newValue == "boxed")
                targEl.addClass( "sed-row-boxed" ).removeClass("sed-row-wide");
            else
                targEl.addClass( "sed-row-wide" ).removeClass("sed-row-boxed");*/

            $("#site-editor-main-part").find(".sed-row-pb > .sed-pb-module-container").trigger("sedChangedPageLength" , [newValue]);

        }

    });

    $( function() {

        var _pageOptionsData = window._sedAppPreviewPageOptionsData;
        api.themeFeatures   = window._sedThemeFeaturesSettings;

        //console.log( "------_pageOptionsData-------------" , _pageOptionsData );

        api.pagesOptionsPreview = new api.SiteEditorPageOptionsPreview({
            data : _pageOptionsData
        });

        api.pageSettings.page_length = function( newValue , settingId ){

            api.pagesOptionsPreview.setPageLength( newValue , 'page' );

        };

        api.pageSettings.custom_css_code = function( newValue , settingId ){

            //sanitize string => remove html tags
            newValue = newValue.replace(/(<([^>]+)>)/ig,"");

            $("#sed_page_custom_css_code").html( newValue );

        };

        api.pageConditions = window._sedAppDependenciesPageConditions;

        api.Events.bind( 'afterPageInfoReady' , function(){

            api.preview.send( 'sedCurrentPageConditions' , api.pageConditions );

        });

    });


})( sedApp, jQuery );